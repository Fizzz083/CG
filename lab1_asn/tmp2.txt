#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <stdlib.h>
#include <stdio.h>
#include <windows.h>
#include <math.h>

double Txval=0,Tyval=0,Tzval=0, arodure=60;
double eyex = 2;
double eyey = 3;
double eyez = 60;
double centerx = 2;
double centery = 0;
double centerz = 0;
double upx = 0;
double upy = 1;
double upz = 0;
double myval = 0;
double windowHeight=900, windowWidth=900;
GLfloat alpha = 0.0, theta = 0.0, axis_x=0.0, axis_y=0.0;
GLboolean bRotate = false, uRotate = false;




 GLfloat up_fence_coordinate[8][3] =
{
    {28.0,1.0,0.0},
    {28.0,3.0,0.0},
    {28.0,3.0,2.0},
    {28.0,1.0,2.0},

    {-28.0,1.0,0.0},
    {-28.0,3.0,0.0},
    {-28.0,3.0,2.0},
    {-28.0,1.0,2.0}

};
static GLubyte up_fence_indices[6][4] =
{
    {0,3,2,1},
    {3,7,6,2},
    {7,4,5,6},
    {4,0,1,5},
    {5,1,2,6},
    {1,3,0,4}

};
void draw_up_fence_cube()
{
    glBegin(GL_QUADS);
    for (GLint i = 0; i <6; i++)
    {
        glColor3f(0.1f, 0.1f, 0.1f);
        glVertex3fv(&up_fence_coordinate[up_fence_indices[i][0]][0]);
        glVertex3fv(&up_fence_coordinate[up_fence_indices[i][1]][0]);
        glVertex3fv(&up_fence_coordinate[up_fence_indices[i][2]][0]);
        glVertex3fv(&up_fence_coordinate[up_fence_indices[i][3]][0]);
    }
    glEnd();


}

 GLfloat mini_fence_coordinate[8][3] =
{
    {3.0,-5.0,0.0},
    {3.0,5.0,0.0},
    {1.0,5.0,0.0},
    {1.0,-5.0,0.0},

    {3.0,-5.0,2.0},
    {3.0,5.0,2.0},
    {1.0,5.0,2.0},
    {1.0,-5.0,2.0},

};
static GLubyte mini_fence_indices[6][4] =
{
    {0,3,2,1},
    {3,7,6,2},
    {7,4,5,6},
    {4,0,1,5},
    {5,1,2,6},
    {1,3,0,4}

};


void draw_mini_fence_cube()
{
    glBegin(GL_QUADS);
    for (GLint i = 0; i <6; i++)
    {
        glColor3f(0.2f, 0.2f, 0.2f);
        glVertex3fv(&mini_fence_coordinate[mini_fence_indices[i][0]][0]);
        glVertex3fv(&mini_fence_coordinate[mini_fence_indices[i][1]][0]);
        glVertex3fv(&mini_fence_coordinate[mini_fence_indices[i][2]][0]);
        glVertex3fv(&mini_fence_coordinate[mini_fence_indices[i][3]][0]);
    }
    glEnd();
}

 GLfloat house_coordinate[8][3] =
{
    {-18.0,-5.0,-5.0},
    {-18.0,25.0,-5.0},
    {18.0,25.0,-5.0},
    {18.0,-5.0,-5.0},

    {-18.0,-5.0,-43.0},
    {-18.0,25.0,-43.0},
    {18.0,25.0,-43.0},
    {18.0,-5.0,-43.0},

};
static GLubyte house_indices[6][4] =
{
    {0,3,2,1},
    {3,7,6,2},
    {7,4,5,6},
    {4,0,1,5},
    {5,1,2,6},
    {1,3,0,4}

};

void draw_house_cube()
{
    glBegin(GL_QUADS);
    for (GLint i = 0; i <6; i++)
    {
        glColor3f(0.5, 0, 1);
        glVertex3fv(&house_coordinate[house_indices[i][0]][0]);
        glVertex3fv(&house_coordinate[house_indices[i][1]][0]);
        glVertex3fv(&house_coordinate[house_indices[i][2]][0]);
        glVertex3fv(&house_coordinate[house_indices[i][3]][0]);
    }
    glEnd();
}

 GLfloat house_down_roof_coordinate[8][3] =
{
    //{-20.0,-5.0,-2.0},

    {-18.0,25.0,-5.0},
    {-25,30,3},
    {25,30,3},
    {18.0,25.0,-5.0},
    //{20.0,-5.0,-2.0},

    {-18.0,25.0,-43.0},
    {-25,30.0,-49.0},
    {25,30,-49.0},
    {18.0,25.0,-43.0},

};
static GLubyte house_down_roof_indices[6][4] =
{
    {0,3,2,1},
    {3,7,6,2},
    {7,4,5,6},
    {4,0,1,5},
    {5,1,2,6},
    {1,3,0,4}

};


void draw_house_down_roof_cube()
{
    glBegin(GL_QUADS);
    for (GLint i = 0; i <6; i++)
    {
       // glColor4f(1.0f, 0.5f, 0.0f, 0.0f);//orange/brown
        glColor3f(.239, .047, 0.008);//Bronze
        glVertex3fv(&house_down_roof_coordinate[house_down_roof_indices[i][0]][0]);
        glVertex3fv(&house_down_roof_coordinate[house_down_roof_indices[i][1]][0]);
        glVertex3fv(&house_down_roof_coordinate[house_down_roof_indices[i][2]][0]);
        glVertex3fv(&house_down_roof_coordinate[house_down_roof_indices[i][3]][0]);
    }
    glEnd();
}



 GLfloat house_top_roof_pyramid[5][3] =
{

    {-25,30,3},
    {25,30,3},
    //{20.0,-5.0,-2.0},
    {-25,30.0,-49.0},
    {25,30,-49.0},
    {0,48,-26.0}

};

static GLubyte house_top_roof_pyramid_Indices[4][3] =
{
    {4, 3, 2},
    {4, 2, 0},
    {4, 3, 1},
    {4, 0, 1}
};


void draw_house_roof_top_pyramid()
{
    glColor3f(1,0,0);
    glBegin(GL_TRIANGLES);
    for (GLint i = 0; i <4; i++)
    {
        glColor3f(.239, .047, 0.008);//Bronze
        glVertex3fv(&house_top_roof_pyramid[house_top_roof_pyramid_Indices[i][0]][0]);
        glVertex3fv(&house_top_roof_pyramid[house_top_roof_pyramid_Indices[i][1]][0]);
        glVertex3fv(&house_top_roof_pyramid[house_top_roof_pyramid_Indices[i][2]][0]);
    }
    glEnd();
}

 GLfloat door_coordinate[4][3] =
{
    {-9.0, -5, -4.989},
    {-9.0, 7, -4.989},
    {-1.0, 7, -4.9899},
    {-1.0, -5, -4.9899}
};



void draw_door()
{

    glBegin(GL_QUADS);

        glColor3f(0,1,0);
        glVertex3fv(&door_coordinate[0][0]);
        glVertex3fv(&door_coordinate[1][0]);
         glVertex3fv(&door_coordinate[2][0]);
          glVertex3fv(&door_coordinate[3][0]);

    glEnd();
}

 GLfloat window_coordinate[4][3] =
{
    {4.0, 9, -4.989},
    {4.0, 13, -4.989},
    {8.0, 13, -4.9899},
    {8.0, 9, -4.9899}
};



void draw_window()
{

    glBegin(GL_QUADS);

        glColor3f(0,1,0);
        glVertex3fv(&window_coordinate[0][0]);
        glVertex3fv(&window_coordinate[1][0]);
         glVertex3fv(&window_coordinate[2][0]);
          glVertex3fv(&window_coordinate[3][0]);

    glEnd();
}









void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

    glMatrixMode( GL_PROJECTION );
    glLoadIdentity();
    glFrustum(-5,5, -5, 5, 4, 1000);

     //gluPerspective(60,1,5,100);
    glMatrixMode( GL_MODELVIEW );
    glLoadIdentity();
    gluLookAt(eyex,eyey,eyez, centerx,centery,centerz, upx,upy,upz); // camera , ,

    glViewport(0, 0, windowHeight, windowWidth);





    //glRotatef(30, 0, 0, 1 );
    glScalef(1.5,1.5,1.5);
    glRotatef( alpha,axis_x, axis_y, 0.0 );
    glRotatef( theta, axis_x, axis_y, 0.0 );

    // glTranslatef(0,0,Tzval);
      glTranslatef(Txval,Tyval,Tzval);
       draw_up_fence_cube();
//       glTranslatef(Txval,0,0);

//       draw_house_cube();
//       draw_house_down_roof_cube();
//       draw_house_roof_top_pyramid();
//       draw_door();
//
//
//    draw_window();
//    glTranslatef(5.50,0,0);
//    draw_window();
//    glTranslatef(-5.5,0,0);
//
//     draw_window();
//    glTranslatef(0,5.5,0);
//    draw_window();
//  //  glTranslatef(0,-5.5,0);
//  draw_window();
//    glTranslatef(5.50,0,0);
//    draw_window();
//    glTranslatef(-5.5,0,0);
//    glTranslatef(0,-5.5,0);
//
//
//
//
//     //one side
//    draw_up_fence_cube();
//    glTranslatef(0.0,-3,0);
//    draw_up_fence_cube();
//    glTranslatef(0.0,3,0);
//   // draw_mini_fence_cube();
//   // make_multi_min();
//    for( GLint i=0; i<6; i++)
//    {
//
//        // glRotatef(60, 0, 0, 1 );
//        draw_mini_fence_cube();
//        glTranslatef(4.0,0,0);
//    }
//    glTranslatef(-24.0,0,0);
//    for( GLint i=0; i<6; i++)
//    {
//        glTranslatef(-4.0,0,0);
//        // glRotatef(60, 0, 0, 1 );
//        draw_mini_fence_cube();
//    }
//    glTranslatef(24.0,0,0);
//
//
//
//    // 2nd side
//    glRotatef(90, 0, 1, 0 );
//     glTranslatef(24,0,24);
//    draw_up_fence_cube();
//    glTranslatef(0.0,-3,0);
//    draw_up_fence_cube();
//    glTranslatef(0.0,3,0);
//   // draw_mini_fence_cube();
//   // make_multi_min();
//    for( GLint i=0; i<6; i++)
//    {
//
//        // glRotatef(60, 0, 0, 1 );
//        draw_mini_fence_cube();
//        glTranslatef(4.0,0,0);
//    }
//    glTranslatef(-24.0,0,0);
//    for( GLint i=0; i<6; i++)
//    {
//        glTranslatef(-4.0,0,0);
//        // glRotatef(60, 0, 0, 1 );
//        draw_mini_fence_cube();
//    }
//    glTranslatef(24.0,0,0);
//
//
//     glRotatef(90, 0, 1, 0 );
//     glTranslatef(24,0,24);
//    draw_up_fence_cube();
//    glTranslatef(0.0,-3,0);
//    draw_up_fence_cube();
//    glTranslatef(0.0,3,0);
//   // draw_mini_fence_cube();
//   // make_multi_min();
//    for( GLint i=0; i<6; i++)
//    {
//
//        // glRotatef(60, 0, 0, 1 );
//        draw_mini_fence_cube();
//        glTranslatef(4.0,0,0);
//    }
//    glTranslatef(-24.0,0,0);
//    for( GLint i=0; i<6; i++)
//    {
//        glTranslatef(-4.0,0,0);
//        // glRotatef(60, 0, 0, 1 );
//        draw_mini_fence_cube();
//    }
//    glTranslatef(24.0,0,0);
//
//     glRotatef(90, 0, 1, 0 );
//     glTranslatef(24,0,24);
//    draw_up_fence_cube();
//    glTranslatef(0.0,-3,0);
//    draw_up_fence_cube();
//    glTranslatef(0.0,3,0);
//   // draw_mini_fence_cube();
//   // make_multi_min();
//    for( GLint i=0; i<6; i++)
//    {
//
//        // glRotatef(60, 0, 0, 1 );
//        draw_mini_fence_cube();
//        glTranslatef(4.0,0,0);
//    }
//    glTranslatef(-24.0,0,0);
//    for( GLint i=0; i<6; i++)
//    {
//        glTranslatef(-4.0,0,0);
//        // glRotatef(60, 0, 0, 1 );
//        draw_mini_fence_cube();
//    }
//    glTranslatef(24.0,0,0);

     /*
    glPushMatrix();
    glTranslatef(0,0,Tzval);

    glRotatef( alpha,axis_x, axis_y, 0.0 );
    glRotatef( theta, axis_x, axis_y, 0.0 );
    drawpyramid();
    glPopMatrix();

   /*
     glPushMatrix();
        glTranslatef(0,0,Tzval);

        glutSolidCube(1);
    glPopMatrix();
  */

    glFlush();
    glutSwapBuffers();
}
GLfloat alphaY = 0.0, thetaP = 0.0, gammaR = 0.0;

double Roll_alpha_mat[3][3] =
{
    {cos(alphaY),-sin(alphaY),0},
    {sin(alphaY),cos(alphaY),0},
    {0,0,1}
};

GLfloat Roll_theta_mat[3][3] =
{
    {cos(thetaP),0,sin(thetaP)},
    {0,1,0},
    {-sin(thetaP),0,cos(thetaP)}
};

 GLfloat Roll_gamma_mat[3][3] =
{
    {1,0,0},
    {0,cos(gammaR),-sin(gammaR)},
    {0,sin(gammaR),cos(gammaR)}

};


void Roll()
{
    Roll_alpha_mat[0][0] = cos(alphaY);
    Roll_alpha_mat[0][1]= -sin(alphaY);
    Roll_alpha_mat[0][3] = 0;
    Roll_alpha_mat[1][0]=sin(alphaY);
    Roll_alpha_mat[1][1]=cos(alphaY);
    Roll_alpha_mat[1][2]=0;



//    ///up_fence_coordinate
//    printf("alphaY %lf    %lf\n", alphaY,Roll_alpha_mat[0][0] );
//    for(int i=0; i<3; i++)
//    {
//        for(int j=0; j<3; j++)
//        {
//            //  up_fence_coordinate[i][j] = res[j];
//            printf("%lf ", Roll_alpha_mat[i][j]);
//        }
//        printf("\n");
//    }
//    printf("\n\n");



    for(GLint i=0;i<8;i++)
    {
        GLfloat tmp[3];
        for(GLint j=0;j<3;j++)
        {
            tmp[j] = up_fence_coordinate[i][j];
        }

        GLfloat res[3]={0};
        for(GLint k = 0;k<3;k++)
        {
            for(GLint r = 0;r<3;r++)
            {
                res[k]+=Roll_alpha_mat[k][r]*tmp[r];
            }
        }

        for(GLint j=0;j<3;j++)
        {
            up_fence_coordinate[i][j] = res[j];
            printf("%lf ", up_fence_coordinate[i][j]);
        }
        printf("\n");
    }


    ///mini_fence_coordinate
     for(GLint i=0;i<8;i++)
    {
        GLfloat tmp[3];
        for(GLint j=0;j<3;j++)
        {
            tmp[j] = up_fence_coordinate[i][j];
        }

        GLfloat res[3]={0};
        for(GLint k = 0;k<3;k++)
        {
            for(GLint r = 0;r<3;r++)
            {
                res[k]+=Roll_alpha_mat[k][r]*tmp[r];
            }
        }

        for(GLint j=0;j<3;j++)
        {
            up_fence_coordinate[i][j] = res[j];
            printf("%lf ", up_fence_coordinate[i][j]);
        }
        printf("\n");
    }
    ///house_coordinate
    ///house_down_roof_coordinate
    ///house_top_roof_pyramid
    ///door_coordinate
    ///window_coordinate



}

double limit = 2*3.1516;

void myKeyboardFunc( unsigned char key, int x, int y )
{
    switch ( key )
    {
    case 'r':
        alphaY += 0.002;
        if(alphaY > limit)
            alphaY -= limit*floor(alphaY/(limit));
        Roll();
        break;
    case 't':
        alphaY -= 0.002;
        if(alphaY < 0)
            alphaY += limit-0.002;
        Roll();
        break;
    case 'y':
    case 'Y':
        bRotate = !bRotate;
       // uRotate = false;
        axis_x=0.0;
        axis_y=1.0;

        break;

    case 'x':
    case 'X':
        uRotate = !uRotate;/**<  */
        //bRotate = false;
        axis_x=1.0;
        axis_y=0.0;

        break;
    case 'a':
        eyex-=2;
        break;
    case 'd':
        eyex+=2;
        break;
     case 'w':
        eyey+=2;
        break;
     case 's':
        eyey-=2;
        break;
    case 'f':
        eyez+=2;
        break;
    case 'g':
        eyez-=2;
        break;
    case 27:	// Escape key
        exit(1);
    }
}



void animate()
{
    if (bRotate == true)
    {
        theta += 0.2;
        if(theta > 360.0)
            theta -= 360.0*floor(theta/360.0);
    }

    if (uRotate == true)
    {
        alpha += 0.2;
        if(alpha > 360.0)
            alpha -= 360.0*floor(alpha/360.0);
    }
    glutPostRedisplay();

}


int main (int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);

    glutInitWindowPosition(200,200);
    glutInitWindowSize(windowHeight, windowWidth);
    glutCreateWindow("Traingle-Demo");
    glShadeModel( GL_SMOOTH );
    glEnable( GL_DEPTH_TEST );
    glutKeyboardFunc(myKeyboardFunc);
    glutDisplayFunc(display);
    glutIdleFunc(animate);
    glutMainLoop();

    return 0;
}

